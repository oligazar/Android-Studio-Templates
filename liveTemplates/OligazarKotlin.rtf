{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red192\green237\blue254;\red255\green232\blue203;\red255\green239\blue203;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Oligazar\
\
\cb2 byId 
\i\b0 // finds view by id
\i0\b \cb1 \

\b0 \cf0 \cb3 val $NAME$ = $VIEW$.findViewById(R.id.$NAME$) as $TYPE$View\cf0 \cb1 \

\b \
\cb2 deser 
\i\b0 // Creates Gson Deserializer
\i0 \cb1 \
\cb4 class $MODEL$ModelDeserializer : JsonDeserializer<$MODEL$> \{\
\
    @Throws(JsonParseException::class)\
    override fun deserialize(json: JsonElement, typeOfT: Type, context: JsonDeserializationContext): $MODEL$ \{\
        val jsonObj = json.asJsonObject\
        if (!jsonObj.isJsonObject) return $MODEL$(error = Error(0, "Error when parsing. jsonArray doesn't contain a jsonObject"))\
        val errorObj = jsonObj.get("error")\
        if (errorObj == null) \{\
            // \uc0\u1086 \u1096 \u1080 \u1073 \u1082 \u1080  \u1085 \u1077 \u1090 , \u1087 \u1072 \u1088 \u1089 \u1080 \u1084  \u1082 \u1072 \u1082  \u1085 \u1086 \u1088 \u1084 \u1072 \u1083 \u1100 \u1085 \u1099 \u1081  Order\
            val org = jsonObj.getAsJsonObjectOrNull("org")\
\
            val phones = org?.getAsJsonArrayOrNull("phones")?.map \{\
                it.getAsStringOrNull()\
            \}?.filterNotNull() as ArrayList?\
\
            return $MODEL$(\
                    phones ?: arrayListOf<String>(),\
                    org?.getAsStringOrNull("email") ?: ""\
                    )\
        \} else \{\
            return $MODEL$(error =\
            context.deserialize<Error>(errorObj, Error::class.java))\
        \}\
    \}\
\}\

\b \cb1 \
\cb2 rget 
\i\b0 // Creates Retrofit's GET query
\i0 \cb1 \
\cb4 // $NUM$. $DESCRIPTION$    \
@GET("$PATH$/\{$PATH_ELEMENT$\}")\
fun getUserBooks(@Path("$PATH_ELEMENT$") $PATH_ELEMENT_NAME$: $PATH_ELEMENT_TYPE$,\
                 @Query("$QUERY$") $QUERY_NAME$: $QUERY_TYPE$): Observable<$RETURN$k>>\
\cb1 \

\b \cb2 robj 
\i\b0 // Creates Realm Object
\i0 \cb1 \
\cb4 @RealmClass\
open class $NAME$(\
        @PrimaryKey var id: Int = 0,\
        var voucherNum: String = "",\
        var error: Error? = null): RealmObject() \{\
\
    override fun equals(other: Any?): Boolean \{\
        if (this === other) return true\
        if (other?.javaClass != javaClass) return false\
\
        other as $NAME$\
        if (id != other.id) return false\
        return true\
    \}\
\
    override fun hashCode(): Int \{\
        return id\
    \}\
\
    override fun toString(): String \{\
        return "id: $id, voucherNum: $voucherNum"\
    \}\
\}\

\b \cb1 \
\cb2 rpost 
\i\b0 // Creates Retrofit's post quer method
\i0\b \cb1 \

\b0 \cb4 // $NUM$. $DESCRIPTION$\
 @POST("$PATH$")\
    fun post$NAME$(@Body body: $PARAM1TYPE$): Observable<$RETURN$>\

\b \cb1 \
\cb2 logd 
\i\b0 // Log.d with debug variant check
\i0\b \cb1 \

\b0 \cb4 if (BuildConfig.DEBUG) android.util.Log.d(TAG, "$METHOD_NAME$: $content$")\

\b \cb1 \
\cb2 snack 
\i\b0 // Log.d with debug variant check
\i0\b \cb1 \

\b0 \cb4 android.support.design.widget.Snackbar.make($view$, "$text$", Snackbar.LENGTH_SHORT)\
                .setAction("$action$") \{ $body$ \}\
                .setActionTextColor(ContextCompat.getColor(context, R.color.colorAccent ))\
                .show()}